一、TypeScript简介：

1、新增了很多额外的数据类型
2、完整的面向对象编程

二、环境搭建

cnpm i typescript -g
tsc -v
tsc -h

tsc --init  生成tsconfig.json文件
在这个配置文件中，手动配置 outDir:'./dist'    rootDir:'./src'
tsc --watch 启动TS项目（支持自动编译）


三、类型注解

和JavaScript的数据类型相似之外，还新增元组、枚举、any、void。

四、函数

函数声明的标准写法（参数的写法、返回值类型的写法）
函数表达式的写法
可选参数
剩余参数
参数默认值
函数重载

五、接口

定义对象的形状 interface Test {}
只读属性 readonly
可选属性 ?
可扩展属性 [propName:any]: any

六、泛型

泛型（Generics）是指在定义函数、接口或类的时候，不预先指定具体的类型，而在使用的时候再指定类型的一种特性。

泛型 Array<number>  ReadonlyArray<number>
泛型约束  <T extends LengthType>
泛型类 Dog<T>
泛型接口（泛型类型） Point<T>


七、TS OOP

类(Class)：定义了一件事物的抽象特点，包含它的属性和方法
对象（Object）：类的实例，通过 new 生成
面向对象（OOP）的三大特性：封装、继承、多态
封装（Encapsulation）：将对数据的操作细节隐藏起来，只暴露对外的接口。外界调用端不需要（也不可能）知道细节，就能通过对外提供的接口来访问该对象，同时也保证了外界无法任意更改对象内部的数据
继承（Inheritance）：子类继承父类，子类除了拥有父类的所有特性外，还有一些更具体的特性
多态（Polymorphism）：由继承而产生了相关的不同的类，对同一个方法可以有不同的响应。比如 Cat 和 Dog 都继承自 Animal，但是分别实现了自己的 eat 方法。此时针对某一个实例，我们无需了解它是 Cat 还是 Dog，就可以直接调用 eat 方法，程序会自动判断出来应该如何执行 eat
存取器（getter & setter）：用以改变属性的读取和赋值行为
修饰符（Modifiers）：修饰符是一些关键字，用于限定成员或类型的性质。比如 public 表示公有属性或方法
抽象类（Abstract Class）：抽象类是供其他类继承的基类，抽象类不允许被实例化。抽象类中的抽象方法必须在子类中被实现
接口（Interfaces）：不同类之间公有的属性或方法，可以抽象成一个接口。接口可以被类实现（implements）。一个类只能继承自另一个类，但是可以实现多个接口

八、TS高级

类型推论  (msg as string)
联合类型
null、undefined、never

声明合并（函数重载、接口合并、类合并）













